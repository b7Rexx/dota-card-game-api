{"version":3,"sources":["../../src/utils/jwtAuth.js"],"names":["getJwtToken","id","jwt","sign","expiresIn","verifyJwtToken","token","Promise","resolve","reject","verify","err","decoded"],"mappings":";;;;;;;;AAAA;;;;AAEA;;;;;AAKO,SAASA,WAAT,CAAqBC,EAArB,EAAyB;AAC9B,SAAOC,sBAAIC,IAAJ,CAAS;AAAEF,IAAAA,EAAE,EAAEA;AAAN,GAAT,EAAqB,cAArB,EAAqC;AAAEG,IAAAA,SAAS,EAAE;AAAb,GAArC,CAAP;AACD;AAED;;;;;;;;AAMO,SAASC,cAAT,CAAwBC,KAAxB,EAA+B;AACpC,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCP,0BAAIQ,MAAJ,CAAWJ,KAAX,EAAkB,cAAlB,EAAkC,UAAUK,GAAV,EAAeC,OAAf,EAAwB;AACxD,UAAID,GAAJ,EAASF,MAAM,CAACE,GAAD,CAAN,CAAT,KACKH,OAAO,CAACI,OAAD,CAAP;AACN,KAHD;AAID,GALM,CAAP;AAMD","sourcesContent":["import jwt from 'jsonwebtoken';\n\n/**\n * Create jwt token.\n *\n * @param {*} id\n */\nexport function getJwtToken(id) {\n  return jwt.sign({ id: id }, 'ThisIsSecret', { expiresIn: '1d' });\n}\n\n/**\n * Verify jwt token.\n *\n * @param {*} token\n * @returns {Promise}\n */\nexport function verifyJwtToken(token) {\n  return new Promise((resolve, reject) => {\n    jwt.verify(token, 'ThisIsSecret', function (err, decoded) {\n      if (err) reject(err);\n      else resolve(decoded);\n    });\n  });\n}\n"],"file":"jwtAuth.js"}