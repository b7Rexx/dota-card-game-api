{"version":3,"sources":["../../src/utils/uploadImage.js"],"names":["saveResizedImages","base64Img","split","buffer","Buffer","from","imageName","Promise","resolve","then","image","path","imagePath","resize","fit","sharp","inside","withoutEnlargement","toFile","thumbnail","thumbnailPath","original","originalPath"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;;;AAEA;;;;;;AAMO,SAASA,iBAAT,CAA2BC,SAA3B,EAAsC;AAC3CA,EAAAA,SAAS,GAAGA,SAAS,CAACC,KAAV,CAAgB,SAAhB,EAA2B,CAA3B,CAAZ;AACA,QAAMC,MAAM,GAAGC,MAAM,CAACC,IAAP,CAAYJ,SAAZ,EAAuB,QAAvB,CAAf;AACA,QAAMK,SAAS,GAAI,GAAE,eAAS,MAA9B;AAEA,SAAO,IAAIC,OAAJ,CAAaC,OAAD,IAAa;AAC9BA,IAAAA,OAAO;AACR,GAFM,EAGJC,IAHI,CAGC,MAAM;AACV,UAAMC,KAAK,GAAGC,cAAKH,OAAL,CAAc,GAAEI,qBAAU,UAASN,SAAU,EAA7C,CAAd;;AAEA,wBAAMH,MAAN,EACGU,MADH,CACU,GADV,EACe,GADf,EACoB;AAChBC,MAAAA,GAAG,EAAEC,eAAMD,GAAN,CAAUE,MADC;AAEhBC,MAAAA,kBAAkB,EAAE;AAFJ,KADpB,EAKGC,MALH,CAKUR,KALV;AAMD,GAZI,EAaJD,IAbI,CAaC,MAAM;AACV,UAAMU,SAAS,GAAGR,cAAKH,OAAL,CAAc,GAAEY,yBAAc,cAAad,SAAU,EAArD,CAAlB;;AAEA,wBAAMH,MAAN,EACGU,MADH,CACU,EADV,EACc,EADd,EACkB;AACdC,MAAAA,GAAG,EAAEC,eAAMD,GAAN,CAAUE,MADD;AAEdC,MAAAA,kBAAkB,EAAE;AAFN,KADlB,EAKGC,MALH,CAKUC,SALV;AAMD,GAtBI,EAuBJV,IAvBI,CAuBC,MAAM;AACV,UAAMY,QAAQ,GAAGV,cAAKH,OAAL,CAAc,GAAEc,wBAAa,aAAYhB,SAAU,EAAnD,CAAjB;;AAEA,wBAAMH,MAAN,EAAce,MAAd,CAAqBG,QAArB;AAEA,WAAOf,SAAP;AACD,GA7BI,CAAP;AA8BD","sourcesContent":["import sharp from 'sharp';\nimport { v4 as uuidv4 } from 'uuid';\nimport path from 'path';\nimport { imagePath, originalPath, thumbnailPath } from '../uploadPath';\n\n/**\n * Resize images with buffer returning imageName in promise.\n *\n * @param {*} base64Img\n * @returns {Promise}\n */\nexport function saveResizedImages(base64Img) {\n  base64Img = base64Img.split('base64,')[1];\n  const buffer = Buffer.from(base64Img, 'base64');\n  const imageName = `${uuidv4()}.png`;\n\n  return new Promise((resolve) => {\n    resolve();\n  })\n    .then(() => {\n      const image = path.resolve(`${imagePath}/image_${imageName}`);\n\n      sharp(buffer)\n        .resize(100, 100, {\n          fit: sharp.fit.inside,\n          withoutEnlargement: true,\n        })\n        .toFile(image);\n    })\n    .then(() => {\n      const thumbnail = path.resolve(`${thumbnailPath}/thumbnail_${imageName}`);\n\n      sharp(buffer)\n        .resize(50, 50, {\n          fit: sharp.fit.inside,\n          withoutEnlargement: true,\n        })\n        .toFile(thumbnail);\n    })\n    .then(() => {\n      const original = path.resolve(`${originalPath}/original_${imageName}`);\n\n      sharp(buffer).toFile(original);\n\n      return imageName;\n    });\n}\n"],"file":"uploadImage.js"}