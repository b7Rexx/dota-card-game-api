{"version":3,"sources":["../../src/repositories/baseRepository.js"],"names":["baseRepository","constructor","modal","defaultOrder","withRelated","getAll","fetchAll","then","data","model","models","getById","id","fetch","catch","NotFoundError","Boom","notFound","create","row","save","update","remove","destroy","where","whereQuery","paginate","page","pageSize","query","orderBy","fetchPage","parseInt","pagination"],"mappings":";;;;;;;AAAA;;;;AAEA;;;AAGA,MAAMA,cAAN,CAAqB;AACnB;;;AAGAC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,SAAKA,KAAL,GAAaA,KAAb;AACA,SAAKC,YAAL,GAAoB,IAApB,CAFiB,CAES;;AAC1B,SAAKC,WAAL,GAAmB,EAAnB;AACD;AAED;;;;;;;AAKAC,EAAAA,MAAM,GAAG;AACP,WAAO,IAAI,KAAKH,KAAT,GAAiBI,QAAjB,GAA4BC,IAA5B,CAAkCC,IAAD,IAAU;AAChD,aAAO;AACLC,QAAAA,KAAK,EAAE,CAAC,GAAGD,IAAI,CAACE,MAAT;AADF,OAAP;AAGD,KAJM,CAAP;AAKD;AAED;;;;;;;;AAMAC,EAAAA,OAAO,CAACC,EAAD,EAAK;AACV,WAAO,IAAI,KAAKV,KAAT,CAAe;AAAEU,MAAAA;AAAF,KAAf,EACJC,KADI,CACE;AACLT,MAAAA,WAAW,EAAE,KAAKA;AADb,KADF,EAIJG,IAJI,CAIEC,IAAD,IAAU;AACd,aAAO;AACLC,QAAAA,KAAK,EAAED;AADF,OAAP;AAGD,KARI,EASJM,KATI,CASE,KAAKZ,KAAL,CAAWa,aATb,EAS4B,MAAM;AACrC,YAAMC,cAAKC,QAAL,CAAc,WAAd,CAAN;AACD,KAXI,CAAP;AAYD;AAED;;;;;;;;AAMAC,EAAAA,MAAM,CAACC,GAAD,EAAM;AACV,WAAO,IAAI,KAAKjB,KAAT,CAAeiB,GAAf,EAAoBC,IAApB,EAAP;AACD;AAED;;;;;;;;;AAOAC,EAAAA,MAAM,CAACT,EAAD,EAAKO,GAAL,EAAU;AACd,WAAO,IAAI,KAAKjB,KAAT,CAAe;AAAEU,MAAAA;AAAF,KAAf,EAAuBQ,IAAvB,CAA4BD,GAA5B,CAAP;AACD;AAED;;;;;;;;AAMAG,EAAAA,MAAM,CAACV,EAAD,EAAK;AACT,WAAO,IAAI,KAAKV,KAAT,CAAe;AAAEU,MAAAA;AAAF,KAAf,EAAuBC,KAAvB,GAA+BN,IAA/B,CAAqCY,GAAD,IAASA,GAAG,CAACI,OAAJ,EAA7C,CAAP;AACD;AAED;;;;;;;;AAMAC,EAAAA,KAAK,CAACC,UAAD,EAAa;AAChB,WAAO,IAAI,KAAKvB,KAAT,CAAeuB,UAAf,EACJZ,KADI,GAEJN,IAFI,CAEEC,IAAD,IAAU;AACd,aAAO;AACLC,QAAAA,KAAK,EAAED;AADF,OAAP;AAGD,KANI,EAOJM,KAPI,CAOE,KAAKZ,KAAL,CAAWa,aAPb,EAO4B,MAAM;AACrC,YAAMC,cAAKC,QAAL,CAAc,WAAd,CAAN;AACD,KATI,CAAP;AAUD;AAED;;;;;;;;;AAOAS,EAAAA,QAAQ,CAACC,IAAI,GAAG,CAAR,EAAWC,QAAQ,GAAG,EAAtB,EAA0B;AAChC,WAAO,KAAK1B,KAAL,CACJ2B,KADI,CACE,YAAY,CAAE,CADhB,EAEJC,OAFI,CAEK,IAAG,KAAK3B,YAAa,EAF1B,EAGJ4B,SAHI,CAGM;AACTH,MAAAA,QAAQ,EAAEI,QAAQ,CAACJ,QAAD,CAAR,IAAsB,EADvB;AAETD,MAAAA,IAAI,EAAEK,QAAQ,CAACL,IAAD,CAAR,IAAkB,CAFf;AAGTvB,MAAAA,WAAW,EAAE,KAAKA;AAHT,KAHN,EAQJG,IARI,CAQEC,IAAD,IAAU;AACd,aAAO;AACLC,QAAAA,KAAK,EAAE,CAAC,GAAGD,IAAI,CAACE,MAAT,CADF;AAELuB,QAAAA,UAAU,EAAE,EAAE,GAAGzB,IAAI,CAACyB;AAAV;AAFP,OAAP;AAID,KAbI,CAAP;AAcD;;AApHkB;;eAsHNjC,c","sourcesContent":["import Boom from '@hapi/boom';\r\n\r\n/**\r\n * return CRUD repository by Modal\r\n */\r\nclass baseRepository {\r\n  /**\r\n   * @param {*} modal\r\n   */\r\n  constructor(modal) {\r\n    this.modal = modal;\r\n    this.defaultOrder = 'id'; // order by in paginate function\r\n    this.withRelated = [];\r\n  }\r\n\r\n  /**\r\n   * Get all rows.\r\n   *\r\n   * @returns {Promise}\r\n   */\r\n  getAll() {\r\n    return new this.modal().fetchAll().then((data) => {\r\n      return {\r\n        model: [...data.models],\r\n      };\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get a row.\r\n   *\r\n   * @param   {Number|String}  id\r\n   * @returns {Promise}\r\n   */\r\n  getById(id) {\r\n    return new this.modal({ id })\r\n      .fetch({\r\n        withRelated: this.withRelated,\r\n      })\r\n      .then((data) => {\r\n        return {\r\n          model: data,\r\n        };\r\n      })\r\n      .catch(this.modal.NotFoundError, () => {\r\n        throw Boom.notFound('Not found');\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Create new row.\r\n   *\r\n   * @param   {Object}  row\r\n   * @returns {Promise}\r\n   */\r\n  create(row) {\r\n    return new this.modal(row).save();\r\n  }\r\n\r\n  /**\r\n   * Update a row.\r\n   *\r\n   * @param   {Number|String}  id\r\n   * @param   {Object} row\r\n   * @returns {Promise}\r\n   */\r\n  update(id, row) {\r\n    return new this.modal({ id }).save(row);\r\n  }\r\n\r\n  /**\r\n   * Delete a row.\r\n   *\r\n   * @param   {Number|String}  id\r\n   * @returns {Promise}\r\n   */\r\n  remove(id) {\r\n    return new this.modal({ id }).fetch().then((row) => row.destroy());\r\n  }\r\n\r\n  /**\r\n   * Where query.\r\n   *\r\n   * @param {*} whereQuery\r\n   * @returns {Promise}\r\n   */\r\n  where(whereQuery) {\r\n    return new this.modal(whereQuery)\r\n      .fetch()\r\n      .then((data) => {\r\n        return {\r\n          model: data,\r\n        };\r\n      })\r\n      .catch(this.modal.NotFoundError, () => {\r\n        throw Boom.notFound('Not found');\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Paginate rows.\r\n   * Default page = 1, no of rows per page = 10.\r\n   *\r\n   * @param {*} page\r\n   * @param {*} pageSize\r\n   */\r\n  paginate(page = 1, pageSize = 10) {\r\n    return this.modal\r\n      .query(function () {})\r\n      .orderBy(`-${this.defaultOrder}`)\r\n      .fetchPage({\r\n        pageSize: parseInt(pageSize) || 10,\r\n        page: parseInt(page) || 1,\r\n        withRelated: this.withRelated,\r\n      })\r\n      .then((data) => {\r\n        return {\r\n          model: [...data.models],\r\n          pagination: { ...data.pagination },\r\n        };\r\n      });\r\n  }\r\n}\r\nexport default baseRepository;\r\n"],"file":"baseRepository.js"}