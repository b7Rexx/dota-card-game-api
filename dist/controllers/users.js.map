{"version":3,"sources":["../../src/controllers/users.js"],"names":["fetchAll","req","res","next","userRepository","getAll","then","data","json","catch","err","fetchById","getById","params","id","create","body","password","status","HttpStatus","CREATED","update","remove","NO_CONTENT","paginate","query","page","pagesize"],"mappings":";;;;;;;;;;;;AAAA;;AAEA;;AACA;;;;AAEA;;;;;;;AAOO,SAASA,QAAT,CAAkBC,GAAlB,EAAuBC,GAAvB,EAA4BC,IAA5B,EAAkC;AACvCC,0BACGC,MADH,GAEGC,IAFH,CAESC,IAAD,IAAUL,GAAG,CAACM,IAAJ,CAAS;AAAED,IAAAA;AAAF,GAAT,CAFlB,EAGGE,KAHH,CAGUC,GAAD,IAASP,IAAI,CAACO,GAAD,CAHtB;AAID;AAED;;;;;;;;;AAOO,SAASC,SAAT,CAAmBV,GAAnB,EAAwBC,GAAxB,EAA6BC,IAA7B,EAAmC;AACxCC,0BACGQ,OADH,CACWX,GAAG,CAACY,MAAJ,CAAWC,EADtB,EAEGR,IAFH,CAESC,IAAD,IAAUL,GAAG,CAACM,IAAJ,CAAS;AAAED,IAAAA;AAAF,GAAT,CAFlB,EAGGE,KAHH,CAGUC,GAAD,IAASP,IAAI,CAACO,GAAD,CAHtB;AAID;AAED;;;;;;;;;AAOO,SAASK,MAAT,CAAgBd,GAAhB,EAAqBC,GAArB,EAA0BC,IAA1B,EAAgC;AACrCF,EAAAA,GAAG,CAACe,IAAJ,CAASC,QAAT,GAAoB,sBAAShB,GAAG,CAACe,IAAJ,CAASC,QAAlB,CAApB;;AACAb,0BACGW,MADH,CACUd,GAAG,CAACe,IADd,EAEGV,IAFH,CAESC,IAAD,IAAUL,GAAG,CAACgB,MAAJ,CAAWC,yBAAWC,OAAtB,EAA+BZ,IAA/B,CAAoC;AAAED,IAAAA;AAAF,GAApC,CAFlB,EAGGE,KAHH,CAGUC,GAAD,IAASP,IAAI,CAACO,GAAD,CAHtB;AAID;AAED;;;;;;;;;AAOO,SAASW,MAAT,CAAgBpB,GAAhB,EAAqBC,GAArB,EAA0BC,IAA1B,EAAgC;AACrCF,EAAAA,GAAG,CAACe,IAAJ,CAASC,QAAT,GAAoB,sBAAShB,GAAG,CAACe,IAAJ,CAASC,QAAlB,CAApB;;AACAb,0BACGiB,MADH,CACUpB,GAAG,CAACY,MAAJ,CAAWC,EADrB,EACyBb,GAAG,CAACe,IAD7B,EAEGV,IAFH,CAESC,IAAD,IAAUL,GAAG,CAACM,IAAJ,CAAS;AAAED,IAAAA;AAAF,GAAT,CAFlB,EAGGE,KAHH,CAGUC,GAAD,IAASP,IAAI,CAACO,GAAD,CAHtB;AAID;AAED;;;;;;;;;AAOO,SAASY,MAAT,CAAgBrB,GAAhB,EAAqBC,GAArB,EAA0BC,IAA1B,EAAgC;AACrCC,0BACGkB,MADH,CACUrB,GAAG,CAACY,MAAJ,CAAWC,EADrB,EAEGR,IAFH,CAESC,IAAD,IAAUL,GAAG,CAACgB,MAAJ,CAAWC,yBAAWI,UAAtB,EAAkCf,IAAlC,CAAuC;AAAED,IAAAA;AAAF,GAAvC,CAFlB,EAGGE,KAHH,CAGUC,GAAD,IAASP,IAAI,CAACO,GAAD,CAHtB;AAID;AAED;;;;;;;;;AAOO,SAASc,QAAT,CAAkBvB,GAAlB,EAAuBC,GAAvB,EAA4BC,IAA5B,EAAkC;AACvCC,0BACGoB,QADH,CACYvB,GAAG,CAACwB,KAAJ,CAAUC,IADtB,EAC4BzB,GAAG,CAACwB,KAAJ,CAAUE,QADtC,EAEGrB,IAFH,CAESC,IAAD,IAAUL,GAAG,CAACM,IAAJ,CAAS;AAAED,IAAAA;AAAF,GAAT,CAFlB,EAGGE,KAHH,CAGUC,GAAD,IAASP,IAAI,CAACO,GAAD,CAHtB;AAID","sourcesContent":["import HttpStatus from 'http-status-codes';\r\n\r\nimport userRepository from '../repositories/userRepository';\r\nimport { hashPass } from '../utils/bcrypt';\r\n\r\n/**\r\n * Get all users.\r\n *\r\n * @param {Object} req\r\n * @param {Object} res\r\n * @param {Function} next\r\n */\r\nexport function fetchAll(req, res, next) {\r\n  userRepository\r\n    .getAll()\r\n    .then((data) => res.json({ data }))\r\n    .catch((err) => next(err));\r\n}\r\n\r\n/**\r\n * Get a user by its id.\r\n *\r\n * @param {Object} req\r\n * @param {Object} res\r\n * @param {Function} next\r\n */\r\nexport function fetchById(req, res, next) {\r\n  userRepository\r\n    .getById(req.params.id)\r\n    .then((data) => res.json({ data }))\r\n    .catch((err) => next(err));\r\n}\r\n\r\n/**\r\n * Create a new user.\r\n *\r\n * @param {Object} req\r\n * @param {Object} res\r\n * @param {Function} next\r\n */\r\nexport function create(req, res, next) {\r\n  req.body.password = hashPass(req.body.password);\r\n  userRepository\r\n    .create(req.body)\r\n    .then((data) => res.status(HttpStatus.CREATED).json({ data }))\r\n    .catch((err) => next(err));\r\n}\r\n\r\n/**\r\n * Update a user.\r\n *\r\n * @param {Object} req\r\n * @param {Object} res\r\n * @param {Function} next\r\n */\r\nexport function update(req, res, next) {\r\n  req.body.password = hashPass(req.body.password);\r\n  userRepository\r\n    .update(req.params.id, req.body)\r\n    .then((data) => res.json({ data }))\r\n    .catch((err) => next(err));\r\n}\r\n\r\n/**\r\n * Delete a user.\r\n *\r\n * @param {Object} req\r\n * @param {Object} res\r\n * @param {Function} next\r\n */\r\nexport function remove(req, res, next) {\r\n  userRepository\r\n    .remove(req.params.id)\r\n    .then((data) => res.status(HttpStatus.NO_CONTENT).json({ data }))\r\n    .catch((err) => next(err));\r\n}\r\n\r\n/**\r\n * Get Paginated users.\r\n *\r\n * @param {*} req\r\n * @param {*} res\r\n * @param {*} next\r\n */\r\nexport function paginate(req, res, next) {\r\n  userRepository\r\n    .paginate(req.query.page, req.query.pagesize)\r\n    .then((data) => res.json({ data }))\r\n    .catch((err) => next(err));\r\n}\r\n"],"file":"users.js"}