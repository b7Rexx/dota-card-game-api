{"version":3,"sources":["../../src/validators/userValidator.js"],"names":["schema","Joi","object","name","string","label","max","required","email","password","min","schemaEdit","userValidator","req","res","next","body","then","catch","err","userEditValidator","findUser","userRepository","getById","params","id"],"mappings":";;;;;;;;;AAAA;;AAEA;;AACA;;;;AAEA;AACA,MAAMA,MAAM,GAAGC,aAAIC,MAAJ,CAAW;AACxBC,EAAAA,IAAI,EAAEF,aAAIG,MAAJ,GAAaC,KAAb,CAAmB,MAAnB,EAA2BC,GAA3B,CAA+B,GAA/B,EAAoCC,QAApC,EADkB;AAExBC,EAAAA,KAAK,EAAEP,aAAIG,MAAJ,GAAaC,KAAb,CAAmB,OAAnB,EAA4BG,KAA5B,GAAoCF,GAApC,CAAwC,GAAxC,EAA6CC,QAA7C,EAFiB;AAGxBE,EAAAA,QAAQ,EAAER,aAAIG,MAAJ,GAAaC,KAAb,CAAmB,UAAnB,EAA+BK,GAA/B,CAAmC,CAAnC,EAAsCJ,GAAtC,CAA0C,GAA1C,EAA+CC,QAA/C;AAHc,CAAX,CAAf;;AAMA,MAAMI,UAAU,GAAGV,aAAIC,MAAJ,CAAW;AAC5BC,EAAAA,IAAI,EAAEF,aAAIG,MAAJ,GAAaC,KAAb,CAAmB,MAAnB,EAA2BC,GAA3B,CAA+B,GAA/B,EAAoCC,QAApC,EADsB;AAE5BC,EAAAA,KAAK,EAAEP,aAAIG,MAAJ,GAAaC,KAAb,CAAmB,OAAnB,EAA4BG,KAA5B,GAAoCF,GAApC,CAAwC,GAAxC,EAA6CC,QAA7C;AAFqB,CAAX,CAAnB;AAKA;;;;;;;;;;AAQA,SAASK,aAAT,CAAuBC,GAAvB,EAA4BC,GAA5B,EAAiCC,IAAjC,EAAuC;AACrC,SAAO,uBAASF,GAAG,CAACG,IAAb,EAAmBhB,MAAnB,EACJiB,IADI,CACC,MAAMF,IAAI,EADX,EAEJG,KAFI,CAEGC,GAAD,IAASJ,IAAI,CAACI,GAAD,CAFf,CAAP;AAGD;AAED;;;;;;;;;;AAQA,SAASC,iBAAT,CAA2BP,GAA3B,EAAgCC,GAAhC,EAAqCC,IAArC,EAA2C;AACzC,SAAO,uBAASF,GAAG,CAACG,IAAb,EAAmBL,UAAnB,EACJM,IADI,CACC,MAAMF,IAAI,EADX,EAEJG,KAFI,CAEGC,GAAD,IAASJ,IAAI,CAACI,GAAD,CAFf,CAAP;AAGD;AAED;;;;;;;;;;AAQA,SAASE,QAAT,CAAkBR,GAAlB,EAAuBC,GAAvB,EAA4BC,IAA5B,EAAkC;AAChC,SAAOO,wBACJC,OADI,CACIV,GAAG,CAACW,MAAJ,CAAWC,EADf,EAEJR,IAFI,CAEC,MAAMF,IAAI,EAFX,EAGJG,KAHI,CAGGC,GAAD,IAASJ,IAAI,CAACI,GAAD,CAHf,CAAP;AAID","sourcesContent":["import Joi from '@hapi/joi';\n\nimport validate from '../utils/validate';\nimport userRepository from '../repositories/userRepository';\n\n// Validation schema\nconst schema = Joi.object({\n  name: Joi.string().label('Name').max(255).required(),\n  email: Joi.string().label('Email').email().max(255).required(),\n  password: Joi.string().label('Password').min(6).max(255).required(),\n});\n\nconst schemaEdit = Joi.object({\n  name: Joi.string().label('Name').max(255).required(),\n  email: Joi.string().label('Email').email().max(255).required(),\n});\n\n/**\n * Validate create user request.\n *\n * @param   {Object}   req\n * @param   {Object}   res\n * @param   {Function} next\n * @returns {Promise}\n */\nfunction userValidator(req, res, next) {\n  return validate(req.body, schema)\n    .then(() => next())\n    .catch((err) => next(err));\n}\n\n/**\n * Validate update user request.\n *\n * @param   {Object}   req\n * @param   {Object}   res\n * @param   {Function} next\n * @returns {Promise}\n */\nfunction userEditValidator(req, res, next) {\n  return validate(req.body, schemaEdit)\n    .then(() => next())\n    .catch((err) => next(err));\n}\n\n/**\n * Validate users existence.\n *\n * @param   {Object}   req\n * @param   {Object}   res\n * @param   {Function} next\n * @returns {Promise}\n */\nfunction findUser(req, res, next) {\n  return userRepository\n    .getById(req.params.id)\n    .then(() => next())\n    .catch((err) => next(err));\n}\n\nexport { findUser, userValidator, userEditValidator };\n"],"file":"userValidator.js"}