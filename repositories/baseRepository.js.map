{"version":3,"sources":["../../src/repositories/baseRepository.js"],"names":["baseRepository","constructor","modal","defaultOrder","withRelated","getAll","fetchAll","then","data","model","models","getById","id","fetch","catch","NotFoundError","Boom","notFound","getByWhere","where","create","row","save","update","remove","destroy","whereQuery","paginate","page","pageSize","query","orderBy","fetchPage","parseInt","pagination"],"mappings":"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","sourcesContent":["import Boom from '@hapi/boom';\n\n/**\n * return CRUD repository by Modal\n */\nclass baseRepository {\n  /**\n   * @param {*} modal\n   */\n  constructor(modal) {\n    this.modal = modal;\n    this.defaultOrder = 'id'; // order by in paginate function\n    this.withRelated = [];\n  }\n\n  /**\n   * Get all rows.\n   *\n   * @returns {Promise}\n   */\n  getAll() {\n    return new this.modal().fetchAll().then((data) => {\n      return {\n        model: [...data.models],\n      };\n    });\n  }\n\n  /**\n   * Get a row.\n   *\n   * @param   {Number|String}  id\n   * @returns {Promise}\n   */\n  getById(id) {\n    return new this.modal({ id })\n      .fetch({\n        withRelated: this.withRelated,\n      })\n      .then((data) => {\n        return {\n          model: data,\n        };\n      })\n      .catch(this.modal.NotFoundError, () => {\n        throw Boom.notFound('Not found');\n      });\n  }\n\n  /**\n   * Fetch rows by where condition.\n   *\n   * @param {object} where\n   * @returns {Promise}\n   */\n  getByWhere(where) {\n    return new this.modal()\n      .where(where)\n      .fetchAll()\n      .then((data) => {\n        return {\n          model: data,\n        };\n      })\n      .catch(this.modal.NotFoundError, () => {\n        throw Boom.notFound('Not found');\n      });\n  }\n\n  /**\n   * Create new row.\n   *\n   * @param   {Object}  row\n   * @returns {Promise}\n   */\n  create(row) {\n    return new this.modal(row).save();\n  }\n\n  /**\n   * Update a row.\n   *\n   * @param   {Number|String}  id\n   * @param   {Object} row\n   * @returns {Promise}\n   */\n  update(id, row) {\n    return new this.modal({ id }).save(row);\n  }\n\n  /**\n   * Delete a row.\n   *\n   * @param   {Number|String}  id\n   * @returns {Promise}\n   */\n  remove(id) {\n    return new this.modal({ id }).destroy();\n    // return new this.modal({ id }).fetch().then((row) => row.destroy());\n  }\n\n  /**\n   * Where query.\n   *\n   * @param {*} whereQuery\n   * @returns {Promise}\n   */\n  where(whereQuery) {\n    return new this.modal(whereQuery)\n      .fetch()\n      .then((data) => {\n        return {\n          model: data,\n        };\n      })\n      .catch(this.modal.NotFoundError, () => {\n        throw Boom.notFound('Not found');\n      });\n  }\n\n  /**\n   * Paginate rows.\n   * Default page = 1, no of rows per page = 10.\n   *\n   * @param {*} page\n   * @param {*} pageSize\n   */\n  paginate(page = 1, pageSize = 10) {\n    return this.modal\n      .query(function () {})\n      .orderBy(`-${this.defaultOrder}`)\n      .fetchPage({\n        pageSize: parseInt(pageSize) || 10,\n        page: parseInt(page) || 1,\n        withRelated: this.withRelated,\n      })\n      .then((data) => {\n        return {\n          model: [...data.models],\n          pagination: { ...data.pagination },\n        };\n      });\n  }\n}\nexport default baseRepository;\n"],"file":"baseRepository.js"}