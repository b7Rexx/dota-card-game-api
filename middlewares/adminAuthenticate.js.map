{"version":3,"sources":["../../src/middlewares/adminAuthenticate.js"],"names":["adminAuthenticate","req","res","next","token","header","Boom","unauthorized","then","decoded","AuthID","id","userRepository","getById","data","user","JSON","parse","stringify","model","isAdmin","catch","err","name"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;AAEA;;;;;;;;;AASe,SAASA,iBAAT,CAA2BC,GAA3B,EAAgCC,GAAhC,EAAqCC,IAArC,EAA2C;AACxD,MAAIC,KAAK,GAAG,EAAZ;AAEA,MAAIH,GAAG,CAACI,MAAJ,CAAW,eAAX,CAAJ,EAAiCD,KAAK,GAAGH,GAAG,CAACI,MAAJ,CAAW,eAAX,CAAR,CAAjC,KACK,IAAIJ,GAAG,CAACI,MAAJ,CAAW,OAAX,CAAJ,EAAyBD,KAAK,GAAGH,GAAG,CAACI,MAAJ,CAAW,OAAX,CAAR,CAAzB,KACA,IAAIJ,GAAG,CAACG,KAAR,EAAeA,KAAK,GAAGH,GAAG,CAACG,KAAZ,CAAf,KACA,MAAME,cAAKC,YAAL,CAAkB,cAAlB,CAAN;AAEL,+BAAeH,KAAf,EACGI,IADH,CACSC,OAAD,IAAa;AACjBR,IAAAA,GAAG,CAACS,MAAJ,GAAaD,OAAO,CAACE,EAArB;;AACAC,4BACGC,OADH,CACWJ,OAAO,CAACE,EADnB,EAEGH,IAFH,CAESM,IAAD,IAAU;AACd,YAAMC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeJ,IAAf,CAAX,EAAiCK,KAA9C;AAEA,UAAIJ,IAAI,CAACK,OAAT,EAAkBjB,IAAI,GAAtB,KACK,OAAOA,IAAI,CAACG,cAAKC,YAAL,CAAkB,WAAlB,CAAD,CAAX;AACN,KAPH,EAQGc,KARH,CAQS,MAAM;AACX,aAAOlB,IAAI,CAACG,cAAKC,YAAL,CAAkB,cAAlB,CAAD,CAAX;AACD,KAVH;AAWD,GAdH,EAeGc,KAfH,CAeUC,GAAD,IAAS;AACd,WAAOnB,IAAI,CAACG,cAAKC,YAAL,CAAkBe,GAAG,CAACC,IAAtB,CAAD,CAAX;AACD,GAjBH;AAkBD","sourcesContent":["import Boom from '@hapi/boom';\nimport { verifyJwtToken } from '../utils/jwtAuth';\nimport userRepository from '../repositories/userRepository';\n\n/**\n * Middleware to handle admin authentication.\n * Checks if id has true for isAdmin.\n * Adds user_id to request body.\n *\n * @param  {Object}   req\n * @param  {Object}   res\n * @param  {Function} next\n */\nexport default function adminAuthenticate(req, res, next) {\n  let token = '';\n\n  if (req.header('Authorization')) token = req.header('Authorization');\n  else if (req.header('Token')) token = req.header('Token');\n  else if (req.token) token = req.token;\n  else throw Boom.unauthorized('Missing Auth');\n\n  verifyJwtToken(token)\n    .then((decoded) => {\n      req.AuthID = decoded.id;\n      userRepository\n        .getById(decoded.id)\n        .then((data) => {\n          const user = JSON.parse(JSON.stringify(data)).model;\n\n          if (user.isAdmin) next();\n          else return next(Boom.unauthorized('Not Admin'));\n        })\n        .catch(() => {\n          return next(Boom.unauthorized('Invalid Auth'));\n        });\n    })\n    .catch((err) => {\n      return next(Boom.unauthorized(err.name));\n    });\n}\n"],"file":"adminAuthenticate.js"}