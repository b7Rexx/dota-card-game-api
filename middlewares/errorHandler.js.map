{"version":3,"sources":["../../src/middlewares/errorHandler.js"],"names":["notFound","req","res","status","HttpStatus","NOT_FOUND","json","error","code","message","getStatusText","methodNotAllowed","METHOD_NOT_ALLOWED","bodyParser","err","next","logger","genericErrorHandler","stack"],"mappings":";;;;;;;;;;AAAA;;AAEA;;AACA;;;;AAEA;;;;;;AAMO,SAASA,QAAT,CAAkBC,GAAlB,EAAuBC,GAAvB,EAA4B;AACjCA,EAAAA,GAAG,CAACC,MAAJ,CAAWC,yBAAWC,SAAtB,EAAiCC,IAAjC,CAAsC;AACpCC,IAAAA,KAAK,EAAE;AACLC,MAAAA,IAAI,EAAEJ,yBAAWC,SADZ;AAELI,MAAAA,OAAO,EAAEL,yBAAWM,aAAX,CAAyBN,yBAAWC,SAApC;AAFJ;AAD6B,GAAtC;AAMD;AAED;;;;;;;;;AAOO,SAASM,gBAAT,CAA0BV,GAA1B,EAA+BC,GAA/B,EAAoC;AACzCA,EAAAA,GAAG,CAACC,MAAJ,CAAWC,yBAAWQ,kBAAtB,EAA0CN,IAA1C,CAA+C;AAC7CC,IAAAA,KAAK,EAAE;AACLC,MAAAA,IAAI,EAAEJ,yBAAWQ,kBADZ;AAELH,MAAAA,OAAO,EAAEL,yBAAWM,aAAX,CAAyBN,yBAAWQ,kBAApC;AAFJ;AADsC,GAA/C;AAMD;AAED;;;;;;;;;;;AASO,SAASC,UAAT,CAAoBC,GAApB,EAAyBb,GAAzB,EAA8BC,GAA9B,EAAmCa,IAAnC,EAAyC;AAC9CC,kBAAOT,KAAP,CAAaO,GAAG,CAACL,OAAjB;;AAEAP,EAAAA,GAAG,CAACC,MAAJ,CAAWW,GAAG,CAACX,MAAf,EAAuBG,IAAvB,CAA4B;AAC1BC,IAAAA,KAAK,EAAE;AACLC,MAAAA,IAAI,EAAEM,GAAG,CAACX,MADL;AAELM,MAAAA,OAAO,EAAEL,yBAAWM,aAAX,CAAyBI,GAAG,CAACX,MAA7B;AAFJ;AADmB,GAA5B;AAMD;AAED;;;;;;;;;;AAQO,SAASc,mBAAT,CAA6BH,GAA7B,EAAkCb,GAAlC,EAAuCC,GAAvC,EAA4Ca,IAA5C,EAAkD;AACvDC,kBAAOT,KAAP,CAAaO,GAAG,CAACI,KAAjB;;AACA,QAAMX,KAAK,GAAG,yBAAWO,GAAX,CAAd;AAEAZ,EAAAA,GAAG,CAACC,MAAJ,CAAWI,KAAK,CAACC,IAAjB,EAAuBF,IAAvB,CAA4B;AAAEC,IAAAA;AAAF,GAA5B;AACD","sourcesContent":["import HttpStatus from 'http-status-codes';\n\nimport logger from '../utils/logger';\nimport buildError from '../utils/buildError';\n\n/**\n * Error response middleware for 404 not found.\n *\n * @param {Object} req\n * @param {Object} res\n */\nexport function notFound(req, res) {\n  res.status(HttpStatus.NOT_FOUND).json({\n    error: {\n      code: HttpStatus.NOT_FOUND,\n      message: HttpStatus.getStatusText(HttpStatus.NOT_FOUND)\n    }\n  });\n}\n\n/**\n * Method not allowed error middleware. This middleware should be placed at\n * the very bottom of the middleware stack.\n *\n * @param {Object} req\n * @param {Object} res\n */\nexport function methodNotAllowed(req, res) {\n  res.status(HttpStatus.METHOD_NOT_ALLOWED).json({\n    error: {\n      code: HttpStatus.METHOD_NOT_ALLOWED,\n      message: HttpStatus.getStatusText(HttpStatus.METHOD_NOT_ALLOWED)\n    }\n  });\n}\n\n/**\n * To handle errors from body parser for cases such as invalid JSON sent through\n * the body (https://github.com/expressjs/body-parser#errors).\n *\n * @param  {Object}   err\n * @param  {Object}   req\n * @param  {Object}   res\n * @param  {Function} next\n */\nexport function bodyParser(err, req, res, next) {\n  logger.error(err.message);\n\n  res.status(err.status).json({\n    error: {\n      code: err.status,\n      message: HttpStatus.getStatusText(err.status)\n    }\n  });\n}\n\n/**\n * Generic error response middleware for validation and internal server errors.\n *\n * @param  {Object}   err\n * @param  {Object}   req\n * @param  {Object}   res\n * @param  {Function} next\n */\nexport function genericErrorHandler(err, req, res, next) {\n  logger.error(err.stack);\n  const error = buildError(err);\n\n  res.status(error.code).json({ error });\n}\n"],"file":"errorHandler.js"}