{"version":3,"sources":["../../src/middlewares/imageMulter.js"],"names":["imageMulterRequired","req","res","next","body","image","allowMime","then","filename","original","thumbnail","Boom","notAcceptable","imageMulterOptional","option"],"mappings":";;;;;;;;AAAA;;AACA;;AACA;;;;AAEA;;;;;;AAMO,SAASA,mBAAT,CAA6BC,GAA7B,EAAkCC,GAAlC,EAAuCC,IAAvC,EAA6C;AAClD,MAAI,qBAASF,GAAG,CAACG,IAAJ,CAASC,KAAlB,EAAyB;AAAEC,IAAAA,SAAS,EAAE;AAAb,GAAzB,CAAJ,EAAmD;AACjD,wCAAkBL,GAAG,CAACG,IAAJ,CAASC,KAA3B,EAAkCE,IAAlC,CAAwCC,QAAD,IAAc;AACnDP,MAAAA,GAAG,CAACG,IAAJ,CAASC,KAAT,GAAkB,SAAQG,QAAS,EAAnC;AACAP,MAAAA,GAAG,CAACG,IAAJ,CAASK,QAAT,GAAqB,YAAWD,QAAS,EAAzC;AACAP,MAAAA,GAAG,CAACG,IAAJ,CAASM,SAAT,GAAsB,aAAYF,QAAS,EAA3C;AACAL,MAAAA,IAAI;AACL,KALD;AAMD,GAPD,MAOO;AACL,WAAOA,IAAI,CAACQ,cAAKC,aAAL,CAAmB,sBAAnB,CAAD,CAAX;AACD;AACF;AAED;;;;;;;;AAMO,SAASC,mBAAT,CAA6BZ,GAA7B,EAAkCC,GAAlC,EAAuCC,IAAvC,EAA6C;AAClD,MAAIF,GAAG,CAACG,IAAJ,CAASC,KAAb,EAAoB;AAClB,QAAI,qBAASJ,GAAG,CAACG,IAAJ,CAASC,KAAlB,EAAyB;AAAEC,MAAAA,SAAS,EAAE;AAAb,KAAzB,CAAJ,EAAmD;AACjD,0CAAkBL,GAAG,CAACG,IAAJ,CAASC,KAA3B,EAAkCE,IAAlC,CAAwCC,QAAD,IAAc;AACnDP,QAAAA,GAAG,CAACG,IAAJ,CAASU,MAAT,GAAkB,IAAlB;AACAb,QAAAA,GAAG,CAACG,IAAJ,CAASC,KAAT,GAAkB,SAAQG,QAAS,EAAnC;AACAP,QAAAA,GAAG,CAACG,IAAJ,CAASK,QAAT,GAAqB,YAAWD,QAAS,EAAzC;AACAP,QAAAA,GAAG,CAACG,IAAJ,CAASM,SAAT,GAAsB,aAAYF,QAAS,EAA3C;AACAL,QAAAA,IAAI;AACL,OAND;AAOD;AACF,GAVD,MAUO;AACLA,IAAAA,IAAI;AACL;AACF","sourcesContent":["import isBase64 from 'is-base64';\nimport Boom from '@hapi/boom';\nimport { saveResizedImages } from '../utils/uploadImage';\n\n/**\n *\n * @param {*} req\n * @param {*} res\n * @param {*} next\n */\nexport function imageMulterRequired(req, res, next) {\n  if (isBase64(req.body.image, { allowMime: true })) {\n    saveResizedImages(req.body.image).then((filename) => {\n      req.body.image = `image_${filename}`;\n      req.body.original = `original_${filename}`;\n      req.body.thumbnail = `thumbnail_${filename}`;\n      next();\n    });\n  } else {\n    return next(Boom.notAcceptable('invalid image format'));\n  }\n}\n\n/**\n *\n * @param {*} req\n * @param {*} res\n * @param {*} next\n */\nexport function imageMulterOptional(req, res, next) {\n  if (req.body.image) {\n    if (isBase64(req.body.image, { allowMime: true })) {\n      saveResizedImages(req.body.image).then((filename) => {\n        req.body.option = true;\n        req.body.image = `image_${filename}`;\n        req.body.original = `original_${filename}`;\n        req.body.thumbnail = `thumbnail_${filename}`;\n        next();\n      });\n    }\n  } else {\n    next();\n  }\n}\n"],"file":"imageMulter.js"}